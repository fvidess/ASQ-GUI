{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\n\n/*==========================================================\r\n * Context for providing API object\r\n */\nexport const ApiContext = /*#__PURE__*/createContext(undefined);\n\n/*==========================================================\r\n * Hook to use a provided API object\r\n */\nexport function useApi() {\n  _s();\n  return useContext(ApiContext);\n}\n\n/*==========================================================\r\n * Hook to create a new API object (stored as state)\r\n */\n_s(useApi, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function useNewApi() {\n  _s2();\n  let [api, setApi] = useState(() => new Api(sessionStorage.getItem('asq-token')));\n\n  // Override the setToken method to create a new API object\n  api.setToken = function setToken(token) {\n    if (token !== api.token) {\n      if (token) {\n        sessionStorage.setItem('asq-token', token);\n      } else {\n        sessionStorage.removeItem('asq-token');\n      }\n      setApi(new Api(token));\n    }\n  };\n  return api;\n}\n\n/*==========================================================\r\n * Actual API class\r\n */\n_s2(useNewApi, \"gtzgcVkVC/Y7MdRsOYvVLw6dNbU=\");\nexport class Api {\n  // Notify API owner to use new token (will be overridden)\n  setToken(token) {}\n  // Property to test if logged in\n  get loggedIn() {\n    return this.token !== null;\n  }\n\n  // Constructor\n  constructor(token) {\n    // The access token, or null if not logged in\n    this.token = void 0;\n    this.token = token;\n  }\n\n  // API METHODS:\n\n  async exampleMethod() {\n    let response = await fetch('http://localhost:8000/api/endpoint', {\n      mode: 'cors',\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n    if (response.ok) {\n      return response.json();\n    } else if (response.status === 401) {\n      this.setToken(null);\n    } else {\n      throw response.json();\n    }\n  }\n}","map":{"version":3,"names":["createContext","useContext","useState","ApiContext","undefined","useApi","_s","useNewApi","_s2","api","setApi","Api","sessionStorage","getItem","setToken","token","setItem","removeItem","loggedIn","constructor","exampleMethod","response","fetch","mode","headers","ok","json","status"],"sources":["C:/Users/fvide/Desktop/MISC/asq-gui-ts/src/api.tsx"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\r\n\r\n/*==========================================================\r\n * Context for providing API object\r\n */\r\nexport const ApiContext = createContext<Api>(undefined as any);\r\n\r\n/*==========================================================\r\n * Hook to use a provided API object\r\n */\r\nexport function useApi() {\r\n  return useContext(ApiContext);\r\n}\r\n\r\n/*==========================================================\r\n * Hook to create a new API object (stored as state)\r\n */\r\nexport function useNewApi() {\r\n  let [api, setApi] = useState<Api>(() => new Api(sessionStorage.getItem('asq-token')));\r\n\r\n  // Override the setToken method to create a new API object\r\n  api.setToken = function setToken(token: string|null) {\r\n    if (token !== api.token) {\r\n      if (token) {\r\n        sessionStorage.setItem('asq-token', token);\r\n      }\r\n      else {\r\n        sessionStorage.removeItem('asq-token');\r\n      }\r\n      setApi(new Api(token));\r\n    }\r\n  }\r\n\r\n  return api;\r\n}\r\n\r\n/*==========================================================\r\n * Actual API class\r\n */\r\nexport class Api {\r\n\r\n  // The access token, or null if not logged in\r\n  token: string|null;\r\n\r\n  // Notify API owner to use new token (will be overridden)\r\n  setToken(token: string|null) { };\r\n\r\n  // Property to test if logged in\r\n  get loggedIn() {\r\n    return this.token !== null;\r\n  }\r\n\r\n  // Constructor\r\n  constructor(token: string|null) {\r\n    this.token = token;\r\n  }\r\n\r\n  // API METHODS:\r\n\r\n  async exampleMethod() {\r\n    let response = await fetch('http://localhost:8000/api/endpoint', {\r\n      mode: 'cors',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + this.token,\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    else if (response.status === 401) {\r\n      this.setToken(null);\r\n    }\r\n    else {\r\n      throw response.json();\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAE3D;AACA;AACA;AACA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,CAAMI,SAAS,CAAQ;;AAE9D;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACvB,OAAOL,UAAU,CAACE,UAAU,CAAC;AAC/B;;AAEA;AACA;AACA;AAFAG,EAAA,CAJgBD,MAAM;AAOtB,OAAO,SAASE,SAASA,CAAA,EAAG;EAAAC,GAAA;EAC1B,IAAI,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAM,MAAM,IAAIS,GAAG,CAACC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;;EAErF;EACAJ,GAAG,CAACK,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAkB,EAAE;IACnD,IAAIA,KAAK,KAAKN,GAAG,CAACM,KAAK,EAAE;MACvB,IAAIA,KAAK,EAAE;QACTH,cAAc,CAACI,OAAO,CAAC,WAAW,EAAED,KAAK,CAAC;MAC5C,CAAC,MACI;QACHH,cAAc,CAACK,UAAU,CAAC,WAAW,CAAC;MACxC;MACAP,MAAM,CAAC,IAAIC,GAAG,CAACI,KAAK,CAAC,CAAC;IACxB;EACF,CAAC;EAED,OAAON,GAAG;AACZ;;AAEA;AACA;AACA;AAFAD,GAAA,CAnBgBD,SAAS;AAsBzB,OAAO,MAAMI,GAAG,CAAC;EAKf;EACAG,QAAQA,CAACC,KAAkB,EAAE,CAAE;EAE/B;EACA,IAAIG,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAACH,KAAK,KAAK,IAAI;EAC5B;;EAEA;EACAI,WAAWA,CAACJ,KAAkB,EAAE;IAZhC;IAAA,KACAA,KAAK;IAYH,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;;EAEA,MAAMK,aAAaA,CAAA,EAAG;IACpB,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MAC/DC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAG,IAAI,CAACT;MACpC;IACF,CAAC,CAAC;IAEF,IAAIM,QAAQ,CAACI,EAAE,EAAE;MACf,OAAOJ,QAAQ,CAACK,IAAI,EAAE;IACxB,CAAC,MACI,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;MAChC,IAAI,CAACb,QAAQ,CAAC,IAAI,CAAC;IACrB,CAAC,MACI;MACH,MAAMO,QAAQ,CAACK,IAAI,EAAE;IACvB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}